Parsing finished successfully.

Symtab: [
 Predefined types:
 void
  (*) to void
   function((*) to int32, int32, int32) returning (*) to void
 int8
  [16] of int8
   (*) to [16] of int8
  (*) to int8
  const int8
   (*) to const int8
    (*) to (*) to const int8
 uint8
 int16
 uint16
 int32
  function(int32) returning int32
   (*) to function(int32) returning int32
  (*) to int32
   (*) to (*) to int32
  function((*) to const int8) returning int32
  function((*) to const int8, ...) returning int32
 uint32
 int64
 uint64

 Scope: file [
  Obj: variable [
   Name: putchar; Address: 0; Definition: defined; Storage: static; Linkage: external;
   Type: [function(int32) returning int32]
  ]
  Obj: variable [
   Name: buffer; Address: 0; Definition: tentative; Storage: static; Linkage: internal;
   Type: [[16] of int8]
   Initialized to:[
   ]
  ]
  Obj: variable [
   Name: printdec; Address: 12; Definition: defined; Storage: static; Linkage: external;
   Type: [function(int32) returning int32]
  ]
  Obj: variable [
   Name: printstr; Address: 4; Definition: defined; Storage: static; Linkage: external;
   Type: [function((*) to const int8) returning int32]
  ]
  Obj: variable [
   Name: printf; Address: 48; Definition: defined; Storage: static; Linkage: external;
   Type: [function((*) to const int8, ...) returning int32]
  ]
  Obj: variable [
   Name: get_variadic_param; Address: 4; Definition: defined; Storage: static; Linkage: external;
   Type: [function((*) to int32, int32, int32) returning (*) to void]
  ]
  Scope: function prototype [
   Obj: variable [
    Name: c; Address: -8; Definition: defined; Storage: auto; Linkage: none;
    Type: [int32]
   ]
   Scope: block [
   ]
   Scope: function [
   ]
  ]
  Scope: function prototype [
   Obj: variable [
    Name: val; Address: -8; Definition: defined; Storage: auto; Linkage: none;
    Type: [int32]
   ]
   Scope: block [
    Obj: variable [
     Name: size; Address: 4; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Obj: variable [
     Name: negative; Address: 8; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Scope: block [
    ]
    Scope: block [
    ]
    Scope: block [
    ]
    Scope: block [
     Obj: variable [
      Name: i; Address: 12; Definition: defined; Storage: auto; Linkage: none;
      Type: [int32]
     ]
     Scope: block [
     ]
    ]
   ]
   Scope: function [
   ]
  ]
  Scope: function prototype [
   Obj: variable [
    Name: str; Address: -8; Definition: defined; Storage: auto; Linkage: none;
    Type: [(*) to const int8]
   ]
   Scope: block [
    Scope: block [
     Obj: variable [
      Name: i; Address: 4; Definition: defined; Storage: auto; Linkage: none;
      Type: [int32]
     ]
     Scope: block [
     ]
    ]
   ]
   Scope: function [
   ]
  ]
  Scope: function prototype [
   Obj: variable [
    Name: format; Address: -8; Definition: defined; Storage: auto; Linkage: none;
    Type: [(*) to const int8]
   ]
   Scope: block [
    Obj: enumerator [
     Name: BASIC; Value: 0;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: FLAGS; Value: 1;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: WIDTH; Value: 2;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: LEN1; Value: 3;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: LEN2; Value: 4;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: LEN4; Value: 5;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: TYPE; Value: 6;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: ERROR; Value: 7;
     Type: [int32]
    ]
    Obj: tag [
     Name: states; Tag type: enum; Definition: defined; Size: 4; Align: 4
     Type: [
      enum states
       (*) to enum states
     ]
    ]
    Obj: typedef [
     Name: states; 
     Type: [enum states]
    ]
    Obj: enumerator [
     Name: DEC; Value: 0;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: DECU; Value: 1;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: HEXLW; Value: 2;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: HEXUP; Value: 3;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: OCT; Value: 4;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: CHAR; Value: 5;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: STR; Value: 6;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: PTR; Value: 7;
     Type: [int32]
    ]
    Obj: tag [
     Name: types; Tag type: enum; Definition: defined; Size: 4; Align: 4
     Type: [
      enum types
       (*) to enum types
     ]
    ]
    Obj: typedef [
     Name: types; 
     Type: [enum types]
    ]
    Obj: enumerator [
     Name: MINUS; Value: 1;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: PLUS; Value: 2;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: ZERO; Value: 4;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: HASH; Value: 8;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: BLANK; Value: 16;
     Type: [int32]
    ]
    Obj: enumerator [
     Name: APOSTROPHE; Value: 32;
     Type: [int32]
    ]
    Obj: tag [
     Name: flag; Tag type: enum; Definition: defined; Size: 4; Align: 4
     Type: [
      enum flag
     ]
    ]
    Obj: typedef [
     Name: flag; 
     Type: [enum flag]
    ]
    Obj: variable [
     Name: buffer; Address: 16; Definition: defined; Storage: auto; Linkage: none;
     Type: [[16] of int8]
    ]
    Obj: variable [
     Name: printed; Address: 20; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Obj: variable [
     Name: state; Address: 24; Definition: defined; Storage: auto; Linkage: none;
     Type: [enum states]
    ]
    Obj: variable [
     Name: cntr; Address: 28; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Obj: variable [
     Name: flags; Address: 32; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Obj: variable [
     Name: width; Address: 36; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Obj: variable [
     Name: length; Address: 40; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Obj: variable [
     Name: type; Address: 44; Definition: defined; Storage: auto; Linkage: none;
     Type: [enum types]
    ]
    Scope: block [
     Obj: variable [
      Name: i; Address: 48; Definition: defined; Storage: auto; Linkage: none;
      Type: [int32]
     ]
     Scope: block [
      Scope: block [
       Scope: block [
        Scope: block [
        ]
       ]
       Scope: block [
        Scope: block [
        ]
       ]
       Scope: block [
        Scope: block [
        ]
       ]
       Scope: block [
        Scope: block [
        ]
       ]
       Scope: block [
        Scope: block [
        ]
       ]
       Scope: block [
        Scope: block [
        ]
       ]
       Scope: block [
        Scope: block [
        ]
       ]
      ]
     ]
    ]
   ]
   Scope: function [
   ]
  ]
  Scope: function prototype [
   Obj: variable [
    Name: stack_offset; Address: -8; Definition: defined; Storage: auto; Linkage: none;
    Type: [(*) to int32]
   ]
   Obj: variable [
    Name: size; Address: -12; Definition: defined; Storage: auto; Linkage: none;
    Type: [int32]
   ]
   Obj: variable [
    Name: align; Address: -16; Definition: defined; Storage: auto; Linkage: none;
    Type: [int32]
   ]
   Scope: block [
    Obj: variable [
     Name: start_addr; Address: 4; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
   ]
   Scope: function [
   ]
  ]
 ]
]

Static objects list: [
 Obj name: buffer [
 ]
]

Label names list: [
 Obj name: putchar
 Obj name: buffer
 Obj name: printdec
 Obj name: printstr
 Obj name: printf
 Obj name: get_variadic_param
]

Global names list: [
 Obj name: putchar
 Obj name: printdec
 Obj name: printstr
 Obj name: printf
 Obj name: get_variadic_param
]

Extern names list: [
]

String table: [
 "    movl    %rbp, %reg0"
 "    add     [%rbp-4], %reg0"
]

Translation unit ::
-Function body :: [FDEF] Name: putchar;
--Function prologue ::
--Expression statement ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Constant :: [NUMLIT] Type: (*) to int32; Value: 61448;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: c; Address: 0; Type: (*) to int32;
--Expression statement ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Constant :: [NUMLIT] Type: (*) to int32; Value: 61440;
----Constant :: [NUMLIT] Type: int32; Value: 1;
--Return expr statement ::
---Constant :: [NUMLIT] Type: int32; Value: 0;
--Function epilogue ::
-Function body :: [FDEF] Name: printdec;
--Function prologue ::
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: size; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: negative; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
--If statement ::
---Less than :: [RVAL] Type: int32; Address: 0; [LogicNode] JumpIfTrueId: 49; JumpIfFalseId: 81; Jump IF FALSE;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: val; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
---Compound statement ::
----Expression statement ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Address of :: [ADDR] Name: negative; Address: 0; Type: (*) to int32;
------Constant :: [NUMLIT] Type: int32; Value: 1;
----Expression statement ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Address of :: [ADDR] Name: val; Address: 0; Type: (*) to int32;
------Unary minus :: [RVAL] Type: int32; Address: 0;
-------Deref pointer :: [LVAL] Address: 0; Type: int32;
--------Address of :: [ADDR] Name: val; Address: 0; Type: (*) to int32;
--Do-while statement :: 81
---Compound statement :: 76
----Expression statement ::
-----Assign :: [RVAL] Type: int8; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int8;
-------Addition :: [RVAL] Type: (*) to int8; Address: 0;
--------Address of :: [ADDR] Name: buffer; Address: 0; Type: (*) to int8;
--------Cast :: [RVAL] Type: uint32; Address: 0;
---------Postfix inc :: [RVAL] Type: int32; Address: 0;
----------Deref pointer :: [LVAL] Address: 0; Type: int32;
-----------Address of :: [ADDR] Name: size; Address: 0; Type: (*) to int32;
----------Constant :: [NUMLIT] Type: int32; Value: 1;
------Cast :: [RVAL] Type: int8; Address: 0;
-------Addition :: [RVAL] Type: int32; Address: 0;
--------Modulo :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: int32;
----------Address of :: [ADDR] Name: val; Address: 0; Type: (*) to int32;
---------Constant :: [NUMLIT] Type: int32; Value: 10;
--------Constant :: [NUMLIT] Type: int32; Value: 48;
----Expression statement ::
-----Div assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Address of :: [ADDR] Name: val; Address: 0; Type: (*) to int32;
------Constant :: [NUMLIT] Type: int32; Value: 10;
---Greater than :: [RVAL] Type: int32; Address: 0; [LogicNode] JumpIfTrueId: 76; JumpIfFalseId: 97; Jump IF TRUE;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: val; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
--If statement ::
---Not equals :: [RVAL] Type: int32; Address: 0; [LogicNode] JumpIfTrueId: 96; JumpIfFalseId: 139; Jump IF FALSE;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: negative; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
---Compound statement ::
----Expression statement ::
-----Assign :: [RVAL] Type: int8; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int8;
-------Addition :: [RVAL] Type: (*) to int8; Address: 0;
--------Address of :: [ADDR] Name: buffer; Address: 0; Type: (*) to int8;
--------Cast :: [RVAL] Type: uint32; Address: 0;
---------Postfix inc :: [RVAL] Type: int32; Address: 0;
----------Deref pointer :: [LVAL] Address: 0; Type: int32;
-----------Address of :: [ADDR] Name: size; Address: 0; Type: (*) to int32;
----------Constant :: [NUMLIT] Type: int32; Value: 1;
------Constant :: [NUMLIT] Type: int8; Value: 45;
--For statement :: 139
---For declarators ::
----Initialization ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
------Subtraction :: [RVAL] Type: int32; Address: 0;
-------Deref pointer :: [LVAL] Address: 0; Type: int32;
--------Address of :: [ADDR] Name: size; Address: 0; Type: (*) to int32;
-------Constant :: [NUMLIT] Type: int32; Value: 1;
---Greater equal :: 112 [RVAL] Type: int32; Address: 0; [LogicNode] JumpIfTrueId: 138; JumpIfFalseId: 141; Jump IF FALSE;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
---Compound statement ::
----Expression statement ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Constant :: [NUMLIT] Type: (*) to int32; Value: 61448;
------Cast :: [RVAL] Type: int32; Address: 0;
-------Deref pointer :: [LVAL] Address: 0; Type: int8;
--------Addition :: [RVAL] Type: (*) to int8; Address: 0;
---------Address of :: [ADDR] Name: buffer; Address: 0; Type: (*) to int8;
---------Cast :: [RVAL] Type: uint32; Address: 0;
----------Deref pointer :: [LVAL] Address: 0; Type: int32;
-----------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Expression statement ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Constant :: [NUMLIT] Type: (*) to int32; Value: 61440;
------Constant :: [NUMLIT] Type: int32; Value: 1;
---Postfix dec :: [RVAL] Type: int32; Address: 0; [LogicNode] JumpId: 112; Jump ALWAYS;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 1;
--Return expr statement :: 141
---Constant :: [NUMLIT] Type: int32; Value: 0;
--Function epilogue ::
-Function body :: [FDEF] Name: printstr;
--Function prologue ::
--For statement ::
---For declarators ::
----Initialization ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
------Constant :: [NUMLIT] Type: int32; Value: 0;
---Not equals :: 186 [RVAL] Type: int32; Address: 0; [LogicNode] JumpIfTrueId: 183; JumpIfFalseId: 189; Jump IF FALSE;
----Cast :: [RVAL] Type: int32; Address: 0;
-----Deref pointer :: [LVAL] Address: 0; Type: const int8;
------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
--------Address of :: [ADDR] Name: str; Address: 0; Type: (*) to (*) to const int8;
-------Cast :: [RVAL] Type: uint32; Address: 0;
--------Deref pointer :: [LVAL] Address: 0; Type: int32;
---------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
---Compound statement ::
----Expression statement ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Constant :: [NUMLIT] Type: (*) to int32; Value: 61448;
------Cast :: [RVAL] Type: int32; Address: 0;
-------Deref pointer :: [LVAL] Address: 0; Type: const int8;
--------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
----------Address of :: [ADDR] Name: str; Address: 0; Type: (*) to (*) to const int8;
---------Cast :: [RVAL] Type: uint32; Address: 0;
----------Deref pointer :: [LVAL] Address: 0; Type: int32;
-----------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Expression statement ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Constant :: [NUMLIT] Type: (*) to int32; Value: 61440;
------Constant :: [NUMLIT] Type: int32; Value: 1;
---Postfix inc :: [RVAL] Type: int32; Address: 0; [LogicNode] JumpId: 186; Jump ALWAYS;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 1;
--Return expr statement :: 189
---Constant :: [NUMLIT] Type: int32; Value: 0;
--Function epilogue ::
-Function body :: [FDEF] Name: printf;
--Function prologue ::
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: printed; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
--Initialization ::
---Assign :: [RVAL] Type: enum states; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: enum states;
-----Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
----Constant :: [NUMLIT] Type: enum states; Value: 0;
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: cntr; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: flags; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: width; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: length; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 4;
--Initialization ::
---Assign :: [RVAL] Type: enum types; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: enum types;
-----Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
----Constant :: [NUMLIT] Type: enum types; Value: 0;
--For statement ::
---For declarators ::
----Initialization ::
-----Assign :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
------Constant :: [NUMLIT] Type: int32; Value: 0;
---Not equals :: 1007 [RVAL] Type: int32; Address: 0; [LogicNode] JumpIfTrueId: 1004; JumpIfFalseId: 1011; Jump IF FALSE;
----Cast :: [RVAL] Type: int32; Address: 0;
-----Deref pointer :: [LVAL] Address: 0; Type: const int8;
------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
--------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-------Cast :: [RVAL] Type: uint32; Address: 0;
--------Deref pointer :: [LVAL] Address: 0; Type: int32;
---------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 0;
---Compound statement ::
----Switch statement :: [LogicNode] JumpId: 273; Jump CASE;
-----Cast :: [RVAL] Type: int32; Address: 0;
------Deref pointer :: [LVAL] Address: 0; Type: enum states;
-------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----Compound statement ::
------Case label :: [CASE] Value: 0; [LogicNode] JumpId: 312; Jump CASE;
------Compound statement :: 312
-------Switch statement :: [LogicNode] JumpId: 307; Jump CASE;
--------Cast :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: const int8;
----------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-----------Cast :: [RVAL] Type: uint32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
--------Compound statement ::
---------Case label :: [CASE] Value: 37; [LogicNode] JumpId: 293; Jump CASE;
---------Expression statement :: 293
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 1;
---------Break statement :: [LogicNode] JumpId: 313; Jump ALWAYS;
---------Default label :: [DEFAULT]  [LogicNode] JumpId: 307; Jump CASE;
---------Expression statement :: 307
----------Function call :: [RVAL] Type: int32; Address: 0;
-----------Address of :: [ADDR] Name: putchar; Address: 0; Type: (*) to function(int32) returning int32;
-----------Cast :: [RVAL] Type: int32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: const int8;
-------------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
--------------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
---------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
--------------Cast :: [RVAL] Type: uint32; Address: 0;
---------------Deref pointer :: [LVAL] Address: 0; Type: int32;
----------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
---------Break statement :: [LogicNode] JumpId: 313; Jump ALWAYS;
------Break statement :: 313 [LogicNode] JumpId: 273; Jump ALWAYS;
------Case label :: [CASE] Value: 1; [LogicNode] JumpId: 475; Jump CASE;
------Compound statement :: 475
-------Switch statement :: [LogicNode] JumpId: 470; Jump CASE;
--------Cast :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: const int8;
----------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-----------Cast :: [RVAL] Type: uint32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
--------Compound statement ::
---------Case label :: [CASE] Value: 45; [LogicNode] JumpId: 329; Jump CASE;
---------Expression statement :: 329
----------Or assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: flags; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 43; [LogicNode] JumpId: 337; Jump CASE;
---------Expression statement :: 337
----------Or assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: flags; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 2;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 48; [LogicNode] JumpId: 345; Jump CASE;
---------Expression statement :: 345
----------Or assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: flags; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 4;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 35; [LogicNode] JumpId: 353; Jump CASE;
---------Expression statement :: 353
----------Or assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: flags; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 8;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 32; [LogicNode] JumpId: 361; Jump CASE;
---------Expression statement :: 361
----------Or assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: flags; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 16;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 39; [LogicNode] JumpId: 369; Jump CASE;
---------Expression statement :: 369
----------Or assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: flags; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 32;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 49; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 50; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 51; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 52; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 53; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 54; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 55; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 56; [LogicNode] JumpId: 395; Jump CASE;
---------Case label :: [CASE] Value: 57; [LogicNode] JumpId: 395; Jump CASE;
---------Expression statement :: 395
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 2;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 104; [LogicNode] JumpId: 410; Jump CASE;
---------Expression statement :: 410
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 3;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 108; [LogicNode] JumpId: 425; Jump CASE;
---------Expression statement :: 425
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 5;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Case label :: [CASE] Value: 100; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 105; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 117; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 120; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 88; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 111; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 99; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 115; [LogicNode] JumpId: 456; Jump CASE;
---------Case label :: [CASE] Value: 112; [LogicNode] JumpId: 456; Jump CASE;
---------Expression statement :: 456
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 6;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
---------Default label :: [DEFAULT]  [LogicNode] JumpId: 470; Jump CASE;
---------Expression statement :: 470
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 7;
---------Break statement :: [LogicNode] JumpId: 476; Jump ALWAYS;
------Break statement :: 476 [LogicNode] JumpId: 273; Jump ALWAYS;
------Case label :: [CASE] Value: 2; [LogicNode] JumpId: 601; Jump CASE;
------Compound statement :: 601
-------Switch statement :: [LogicNode] JumpId: 596; Jump CASE;
--------Cast :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: const int8;
----------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-----------Cast :: [RVAL] Type: uint32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
--------Compound statement ::
---------Case label :: [CASE] Value: 48; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 49; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 50; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 51; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 52; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 53; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 54; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 55; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 56; [LogicNode] JumpId: 510; Jump CASE;
---------Case label :: [CASE] Value: 57; [LogicNode] JumpId: 510; Jump CASE;
---------Expression statement :: 510
----------Mul assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: length; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 10;
---------Expression statement ::
----------Add assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: length; Address: 0; Type: (*) to int32;
-----------Subtraction :: [RVAL] Type: int32; Address: 0;
------------Cast :: [RVAL] Type: int32; Address: 0;
-------------Deref pointer :: [LVAL] Address: 0; Type: const int8;
--------------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
---------------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
----------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
---------------Cast :: [RVAL] Type: uint32; Address: 0;
----------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-----------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
------------Constant :: [NUMLIT] Type: int32; Value: 48;
---------Break statement :: [LogicNode] JumpId: 602; Jump ALWAYS;
---------Case label :: [CASE] Value: 104; [LogicNode] JumpId: 536; Jump CASE;
---------Expression statement :: 536
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 3;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 602; Jump ALWAYS;
---------Case label :: [CASE] Value: 108; [LogicNode] JumpId: 551; Jump CASE;
---------Expression statement :: 551
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 5;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 602; Jump ALWAYS;
---------Case label :: [CASE] Value: 100; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 105; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 117; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 120; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 88; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 111; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 99; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 115; [LogicNode] JumpId: 582; Jump CASE;
---------Case label :: [CASE] Value: 112; [LogicNode] JumpId: 582; Jump CASE;
---------Expression statement :: 582
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 6;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 602; Jump ALWAYS;
---------Default label :: [DEFAULT]  [LogicNode] JumpId: 596; Jump CASE;
---------Expression statement :: 596
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 7;
---------Break statement :: [LogicNode] JumpId: 602; Jump ALWAYS;
------Break statement :: 602 [LogicNode] JumpId: 273; Jump ALWAYS;
------Case label :: [CASE] Value: 3; [LogicNode] JumpId: 664; Jump CASE;
------Compound statement :: 664
-------Switch statement :: [LogicNode] JumpId: 659; Jump CASE;
--------Cast :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: const int8;
----------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-----------Cast :: [RVAL] Type: uint32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
--------Compound statement ::
---------Case label :: [CASE] Value: 104; [LogicNode] JumpId: 618; Jump CASE;
---------Expression statement :: 618
----------Assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: length; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 4;
---------Break statement :: [LogicNode] JumpId: 665; Jump ALWAYS;
---------Case label :: [CASE] Value: 100; [LogicNode] JumpId: 645; Jump CASE;
---------Case label :: [CASE] Value: 105; [LogicNode] JumpId: 645; Jump CASE;
---------Case label :: [CASE] Value: 117; [LogicNode] JumpId: 645; Jump CASE;
---------Case label :: [CASE] Value: 120; [LogicNode] JumpId: 645; Jump CASE;
---------Case label :: [CASE] Value: 88; [LogicNode] JumpId: 645; Jump CASE;
---------Case label :: [CASE] Value: 111; [LogicNode] JumpId: 645; Jump CASE;
---------Expression statement :: 645
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 6;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 665; Jump ALWAYS;
---------Default label :: [DEFAULT]  [LogicNode] JumpId: 659; Jump CASE;
---------Expression statement :: 659
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 7;
---------Break statement :: [LogicNode] JumpId: 665; Jump ALWAYS;
------Break statement :: 665 [LogicNode] JumpId: 273; Jump ALWAYS;
------Case label :: [CASE] Value: 4; [LogicNode] JumpId: 727; Jump CASE;
------Compound statement :: 727
-------Switch statement :: [LogicNode] JumpId: 722; Jump CASE;
--------Cast :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: const int8;
----------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-----------Cast :: [RVAL] Type: uint32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
--------Compound statement ::
---------Case label :: [CASE] Value: 104; [LogicNode] JumpId: 681; Jump CASE;
---------Expression statement :: 681
----------Assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: length; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 2;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 6;
---------Break statement :: [LogicNode] JumpId: 728; Jump ALWAYS;
---------Case label :: [CASE] Value: 100; [LogicNode] JumpId: 708; Jump CASE;
---------Case label :: [CASE] Value: 105; [LogicNode] JumpId: 708; Jump CASE;
---------Case label :: [CASE] Value: 117; [LogicNode] JumpId: 708; Jump CASE;
---------Case label :: [CASE] Value: 120; [LogicNode] JumpId: 708; Jump CASE;
---------Case label :: [CASE] Value: 88; [LogicNode] JumpId: 708; Jump CASE;
---------Case label :: [CASE] Value: 111; [LogicNode] JumpId: 708; Jump CASE;
---------Expression statement :: 708
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 6;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 728; Jump ALWAYS;
---------Default label :: [DEFAULT]  [LogicNode] JumpId: 722; Jump CASE;
---------Expression statement :: 722
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 7;
---------Break statement :: [LogicNode] JumpId: 728; Jump ALWAYS;
------Break statement :: 728 [LogicNode] JumpId: 273; Jump ALWAYS;
------Case label :: [CASE] Value: 5; [LogicNode] JumpId: 790; Jump CASE;
------Compound statement :: 790
-------Switch statement :: [LogicNode] JumpId: 785; Jump CASE;
--------Cast :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: const int8;
----------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-----------Cast :: [RVAL] Type: uint32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
--------Compound statement ::
---------Case label :: [CASE] Value: 108; [LogicNode] JumpId: 744; Jump CASE;
---------Expression statement :: 744
----------Assign :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: length; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 4;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 6;
---------Break statement :: [LogicNode] JumpId: 791; Jump ALWAYS;
---------Case label :: [CASE] Value: 100; [LogicNode] JumpId: 771; Jump CASE;
---------Case label :: [CASE] Value: 105; [LogicNode] JumpId: 771; Jump CASE;
---------Case label :: [CASE] Value: 117; [LogicNode] JumpId: 771; Jump CASE;
---------Case label :: [CASE] Value: 120; [LogicNode] JumpId: 771; Jump CASE;
---------Case label :: [CASE] Value: 88; [LogicNode] JumpId: 771; Jump CASE;
---------Case label :: [CASE] Value: 111; [LogicNode] JumpId: 771; Jump CASE;
---------Expression statement :: 771
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 6;
---------Expression statement ::
----------Postfix dec :: [RVAL] Type: int32; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: int32;
------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
-----------Constant :: [NUMLIT] Type: int32; Value: 1;
---------Break statement :: [LogicNode] JumpId: 791; Jump ALWAYS;
---------Default label :: [DEFAULT]  [LogicNode] JumpId: 785; Jump CASE;
---------Expression statement :: 785
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 7;
---------Break statement :: [LogicNode] JumpId: 791; Jump ALWAYS;
------Break statement :: 791 [LogicNode] JumpId: 273; Jump ALWAYS;
------Case label :: [CASE] Value: 6; [LogicNode] JumpId: 999; Jump CASE;
------Compound statement :: 999
-------Switch statement :: [LogicNode] JumpId: 946; Jump CASE;
--------Cast :: [RVAL] Type: int32; Address: 0;
---------Deref pointer :: [LVAL] Address: 0; Type: const int8;
----------Addition :: [RVAL] Type: (*) to const int8; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: (*) to const int8;
------------Address of :: [ADDR] Name: format; Address: 0; Type: (*) to (*) to const int8;
-----------Cast :: [RVAL] Type: uint32; Address: 0;
------------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------------Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
--------Compound statement ::
---------Case label :: [CASE] Value: 100; [LogicNode] JumpId: 811; Jump CASE;
---------Case label :: [CASE] Value: 105; [LogicNode] JumpId: 811; Jump CASE;
---------Expression statement :: 811
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 0;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Case label :: [CASE] Value: 117; [LogicNode] JumpId: 828; Jump CASE;
---------Expression statement :: 828
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 1;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Case label :: [CASE] Value: 120; [LogicNode] JumpId: 845; Jump CASE;
---------Expression statement :: 845
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 2;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Case label :: [CASE] Value: 88; [LogicNode] JumpId: 862; Jump CASE;
---------Expression statement :: 862
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 3;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Case label :: [CASE] Value: 111; [LogicNode] JumpId: 879; Jump CASE;
---------Expression statement :: 879
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 4;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Case label :: [CASE] Value: 99; [LogicNode] JumpId: 896; Jump CASE;
---------Expression statement :: 896
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 5;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Case label :: [CASE] Value: 115; [LogicNode] JumpId: 913; Jump CASE;
---------Expression statement :: 913
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 6;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Case label :: [CASE] Value: 112; [LogicNode] JumpId: 930; Jump CASE;
---------Expression statement :: 930
----------Assign :: [RVAL] Type: enum types; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
------------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-----------Constant :: [NUMLIT] Type: enum types; Value: 7;
---------Expression statement ::
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 0;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
---------Default label :: [DEFAULT]  [LogicNode] JumpId: 946; Jump CASE;
---------Expression statement :: 946
----------Assign :: [RVAL] Type: enum states; Address: 0;
-----------Deref pointer :: [LVAL] Address: 0; Type: enum states;
------------Address of :: [ADDR] Name: state; Address: 0; Type: (*) to enum states;
-----------Constant :: [NUMLIT] Type: enum states; Value: 7;
---------Break statement :: [LogicNode] JumpId: 957; Jump ALWAYS;
-------Expression statement :: 957
--------Function call :: [RVAL] Type: int32; Address: 0;
---------Address of :: [ADDR] Name: putchar; Address: 0; Type: (*) to function(int32) returning int32;
---------Constant :: [NUMLIT] Type: int32; Value: 37;
-------Expression statement ::
--------Function call :: [RVAL] Type: int32; Address: 0;
---------Address of :: [ADDR] Name: putchar; Address: 0; Type: (*) to function(int32) returning int32;
---------Constant :: [NUMLIT] Type: int32; Value: 32;
-------Expression statement ::
--------Function call :: [RVAL] Type: int32; Address: 0;
---------Address of :: [ADDR] Name: printdec; Address: 0; Type: (*) to function(int32) returning int32;
---------Deref pointer :: [LVAL] Address: 0; Type: int32;
----------Address of :: [ADDR] Name: width; Address: 0; Type: (*) to int32;
-------Expression statement ::
--------Function call :: [RVAL] Type: int32; Address: 0;
---------Address of :: [ADDR] Name: putchar; Address: 0; Type: (*) to function(int32) returning int32;
---------Constant :: [NUMLIT] Type: int32; Value: 32;
-------Expression statement ::
--------Function call :: [RVAL] Type: int32; Address: 0;
---------Address of :: [ADDR] Name: putchar; Address: 0; Type: (*) to function(int32) returning int32;
---------Constant :: [NUMLIT] Type: int32; Value: 32;
-------Expression statement ::
--------Function call :: [RVAL] Type: int32; Address: 0;
---------Address of :: [ADDR] Name: printdec; Address: 0; Type: (*) to function(int32) returning int32;
---------Cast :: [RVAL] Type: int32; Address: 0;
----------Deref pointer :: [LVAL] Address: 0; Type: enum types;
-----------Address of :: [ADDR] Name: type; Address: 0; Type: (*) to enum types;
-------Expression statement ::
--------Function call :: [RVAL] Type: int32; Address: 0;
---------Address of :: [ADDR] Name: putchar; Address: 0; Type: (*) to function(int32) returning int32;
---------Constant :: [NUMLIT] Type: int32; Value: 37;
------Break statement :: [LogicNode] JumpId: 273; Jump ALWAYS;
---Postfix inc :: 273 [RVAL] Type: int32; Address: 0; [LogicNode] JumpId: 1007; Jump ALWAYS;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: i; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 1;
--Return expr statement :: 1011
---Deref pointer :: [LVAL] Address: 0; Type: int32;
----Address of :: [ADDR] Name: printed; Address: 0; Type: (*) to int32;
--Function epilogue ::
-Function body :: [FDEF] Name: get_variadic_param;
--Function prologue ::
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: start_addr; Address: 0; Type: (*) to int32;
----Multiplication :: [RVAL] Type: int32; Address: 0;
-----Division :: [RVAL] Type: int32; Address: 0;
------Subtraction :: [RVAL] Type: int32; Address: 0;
-------Addition :: [RVAL] Type: int32; Address: 0;
--------Deref pointer :: [LVAL] Address: 0; Type: int32;
---------Deref pointer :: [LVAL] Address: 0; Type: (*) to int32;
----------Address of :: [ADDR] Name: stack_offset; Address: 0; Type: (*) to (*) to int32;
--------Deref pointer :: [LVAL] Address: 0; Type: int32;
---------Address of :: [ADDR] Name: align; Address: 0; Type: (*) to int32;
-------Constant :: [NUMLIT] Type: int32; Value: 1;
------Deref pointer :: [LVAL] Address: 0; Type: int32;
-------Address of :: [ADDR] Name: align; Address: 0; Type: (*) to int32;
-----Deref pointer :: [LVAL] Address: 0; Type: int32;
------Address of :: [ADDR] Name: align; Address: 0; Type: (*) to int32;
--Expression statement ::
---Add assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Deref pointer :: [LVAL] Address: 0; Type: (*) to int32;
------Address of :: [ADDR] Name: stack_offset; Address: 0; Type: (*) to (*) to int32;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: size; Address: 0; Type: (*) to int32;
--Inline assembler ::
---String :: [STRLIT] Value:     movl    %rbp, %reg0; Type: (*) to int8
--Inline assembler ::
---String :: [STRLIT] Value:     add     [%rbp-4], %reg0; Type: (*) to int8
--Function epilogue ::

Memory safety report: [
-Symtab: [
--Symtab          allocated =    1, freed =    1;
--Scope           allocated =   42, freed =   42;
--Obj             allocated =   55, freed =   55;
--Struct          allocated =   19, freed =   19;
--StaticVal       allocated =    0, freed =    0;
-]
-Utility: [
--LinkedList      allocated =   38, freed =   38;
--Node            allocated =  358, freed =  358;
--String          allocated =  245, freed =  245;
--Vector          allocated =   89, freed =   89;
--Array           allocated =    8, freed =    8;
-]
-Declarations: [
--TypeFrame       allocated =   17, freed =   17;
--NameFrame       allocated =   14, freed =   14;
--InitFrame       allocated =    0, freed =    0;
--ConstExpr       allocated =   93, freed =   93;
-]
-Statements: [
--TreeNode        allocated = 1046, freed = 1046;
--Tree            allocated =    1, freed =    1;
--Numlit          allocated =  135, freed =  135;
--ExprNode        allocated =  858, freed =  858;
-]
-Generating: [
--CallFrame       allocated =    8, freed =    8;
--ArgAlloc        allocated =    8, freed =    8;
--LogicNode       allocated =  152, freed =  152;
--StackAlloc      allocated =    0, freed =    0;
--MemAlloc        allocated =    8, freed =    8;
--IrInstr         allocated = 1526, freed = 1526;
-]
]

Semantic analysis successful.
