Parsing finished successfully.

Symtab: [
 Predefined types:
 void
  (*) to void
   function(int32) returning (*) to void
   function((*) to void, (*) to const void, int32) returning (*) to void
   function((*) to void, int32, int32) returning (*) to void
  function((*) to void) returning void
  function(void) returning void
  const void
   (*) to const void
 int8
  const int8
   (*) to const int8
  (*) to int8
   function((*) to int8, (*) to const int8) returning (*) to int8
   function((*) to const int8) returning (*) to int8
 uint8
 int16
 uint16
 int32
  function(int32) returning int32
  function((*) to const int8, ...) returning int32
  function((*) to const int8) returning int32
  function((*) to const int8, (*) to const int8) returning int32
  function(void) returning int32
  (*) to int32
 uint32
 int64
 uint64

 Scope: file [
  Obj: variable [
   Name: putchar; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function(int32) returning int32]
  ]
  Obj: variable [
   Name: printf; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to const int8, ...) returning int32]
  ]
  Obj: variable [
   Name: malloc; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function(int32) returning (*) to void]
  ]
  Obj: variable [
   Name: free; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to void) returning void]
  ]
  Obj: variable [
   Name: print_malloc_frames; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function(void) returning void]
  ]
  Obj: variable [
   Name: strlen; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to const int8) returning int32]
  ]
  Obj: variable [
   Name: strcpy; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to int8, (*) to const int8) returning (*) to int8]
  ]
  Obj: variable [
   Name: strcmp; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to const int8, (*) to const int8) returning int32]
  ]
  Obj: variable [
   Name: strdup; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to const int8) returning (*) to int8]
  ]
  Obj: variable [
   Name: strcat; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to int8, (*) to const int8) returning (*) to int8]
  ]
  Obj: variable [
   Name: memcpy; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to void, (*) to const void, int32) returning (*) to void]
  ]
  Obj: variable [
   Name: memmove; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to void, (*) to const void, int32) returning (*) to void]
  ]
  Obj: variable [
   Name: memset; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to void, int32, int32) returning (*) to void]
  ]
  Obj: variable [
   Name: main; Address: 4; Definition: defined; Storage: static; Linkage: external;
   Type: [function(void) returning int32]
  ]
  Scope: function prototype [
   Scope: block [
    Obj: variable [
     Name: x; Address: 4; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Scope: block [
    ]
   ]
   Scope: function [
   ]
  ]
 ]
]

Static objects list: [
]

Label names list: [
 Obj name: main
]

Global names list: [
 Obj name: main
]

Extern names list: [
 Obj name: putchar
 Obj name: printf
 Obj name: malloc
 Obj name: free
 Obj name: print_malloc_frames
 Obj name: strlen
 Obj name: strcpy
 Obj name: strcmp
 Obj name: strdup
 Obj name: strcat
 Obj name: memcpy
 Obj name: memmove
 Obj name: memset
]

String table: [
]

Translation unit ::
-Function body :: [FDEF] Name: main;
--Function prologue ::
--Initialization ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: x; Address: 0; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 15;
--Switch statement :: [LogicNode] JumpId: 32; Jump CASE;
---Deref pointer :: [LVAL] Address: 0; Type: int32;
----Address of :: [ADDR] Name: x; Address: 0; Type: (*) to int32;
---Compound statement ::
----Case label :: [CASE] Value: 1; [LogicNode] JumpId: 14; Jump CASE;
----Case label :: [CASE] Value: 10; [LogicNode] JumpId: 14; Jump CASE;
----Return expr statement :: 14 [LogicNode] JumpId: 33; Jump ALWAYS;
-----Constant :: [NUMLIT] Type: int32; Value: 1;
----Case label :: [CASE] Value: 9; [LogicNode] JumpId: 17; Jump CASE;
----Break statement :: 17 [LogicNode] JumpId: 32; Jump ALWAYS;
----Case label :: [CASE] Value: 3; [LogicNode] JumpId: 23; Jump CASE;
----Case label :: [CASE] Value: 15; [LogicNode] JumpId: 23; Jump CASE;
----Return expr statement :: 23 [LogicNode] JumpId: 33; Jump ALWAYS;
-----Constant :: [NUMLIT] Type: int32; Value: 2;
----Case label :: [CASE] Value: 2; [LogicNode] JumpId: 28; Jump CASE;
----Case label :: [CASE] Value: 7; [LogicNode] JumpId: 28; Jump CASE;
----Break statement :: 28 [LogicNode] JumpId: 32; Jump ALWAYS;
--Return expr statement :: 32
---Constant :: [NUMLIT] Type: int32; Value: 3;
--Function epilogue :: 33

Memory safety report: [
-Symtab: [
--Symtab          allocated =    1, freed =    1;
--Scope           allocated =   18, freed =   18;
--Obj             allocated =   35, freed =   35;
--Struct          allocated =   19, freed =   19;
--StaticVal       allocated =    0, freed =    0;
-]
-Utility: [
--LinkedList      allocated =   31, freed =   31;
--Node            allocated =  200, freed =  200;
--String          allocated =   52, freed =   52;
--Vector          allocated =   11, freed =   11;
--Array           allocated =    0, freed =    0;
-]
-Declarations: [
--TypeFrame       allocated =   15, freed =   15;
--NameFrame       allocated =   15, freed =   15;
--InitFrame       allocated =    0, freed =    0;
--ConstExpr       allocated =    7, freed =    7;
-]
-Statements: [
--TreeNode        allocated =   35, freed =   35;
--Tree            allocated =    1, freed =    1;
--Numlit          allocated =   11, freed =   11;
--ExprNode        allocated =   24, freed =   24;
-]
-Generating: [
--CallFrame       allocated =    0, freed =    0;
--ArgAlloc        allocated =    0, freed =    0;
--LogicNode       allocated =   12, freed =   12;
--StackAlloc      allocated =    0, freed =    0;
--MemAlloc        allocated =    0, freed =    0;
--IrInstr         allocated =   65, freed =   65;
-]
]

Semantic analysis successful.
