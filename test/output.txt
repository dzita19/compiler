Parsing finished successfully.

Symtab: [
 Predefined types:
 void
  (*) to void
   function(int32) returning (*) to void
  function((*) to void) returning void
  function(void) returning void
 int8
  const int8
   (*) to const int8
  (*) to int8
 uint8
 int16
 uint16
 int32
  function(int32) returning int32
  function((*) to const int8, ...) returning int32
  (*) to int32
  function(void) returning int32
 uint32
 int64
 uint64

 Scope: file [
  Obj: variable [
   Name: putchar; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function(int32) returning int32]
  ]
  Obj: variable [
   Name: printf; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to const int8, ...) returning int32]
  ]
  Obj: variable [
   Name: malloc; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function(int32) returning (*) to void]
  ]
  Obj: variable [
   Name: free; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function((*) to void) returning void]
  ]
  Obj: variable [
   Name: print_malloc_frames; Address: 0; Definition: declared; Storage: static; Linkage: external;
   Type: [function(void) returning void]
  ]
  Obj: tag [
   Name: str1; Tag type: struct; Definition: defined; Size: 8; Align: 4
   Type: [
    struct str1: int8 x (0), int32 y (4)
     (*) to struct str1
   ]
  ]
  Obj: tag [
   Name: str2; Tag type: struct; Definition: defined; Size: 12; Align: 4
   Type: [
    struct str2: int8 a (0), struct str1 b (4)
     function(<nonprototype>) returning struct str2
      (*) to function(<nonprototype>) returning struct str2
     (*) to struct str2
      (*) to (*) to struct str2
   ]
  ]
  Obj: variable [
   Name: f; Address: 12; Definition: defined; Storage: static; Linkage: external;
   Type: [function(<nonprototype>) returning struct str2]
  ]
  Obj: variable [
   Name: main; Address: 12; Definition: defined; Storage: static; Linkage: external;
   Type: [function(void) returning int32]
  ]
  Scope: function prototype [
   Obj: variable [
    Name: $return_addr; Address: -8; Definition: defined; Storage: auto; Linkage: none;
    Type: [(*) to struct str2]
   ]
   Scope: block [
    Obj: variable [
     Name: a; Address: 12; Definition: defined; Storage: auto; Linkage: none;
     Type: [struct str2]
    ]
   ]
   Scope: function [
   ]
  ]
  Scope: function prototype [
   Scope: block [
    Obj: variable [
     Name: $storage00; Address: 12; Definition: defined; Storage: auto; Linkage: none;
     Type: [struct str2]
    ]
   ]
   Scope: function [
   ]
  ]
 ]
]

Static objects list: [
]

Label names list: [
 Obj name: f
 Obj name: main
]

Global names list: [
 Obj name: f
 Obj name: main
]

Extern names list: [
 Obj name: putchar
 Obj name: printf
 Obj name: malloc
 Obj name: free
 Obj name: print_malloc_frames
]

String table: [
]

Translation unit ::
-Function body :: [FDEF] Name: f;
--Function prologue ::
--Initialization ::
---Assign :: [RVAL] Type: int8; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int8;
-----Address of :: [ADDR] Name: a; Address: 0; Type: (*) to int8;
----Constant :: [NUMLIT] Type: int8; Value: 1;
---Assign :: [RVAL] Type: int8; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int8;
-----Address of :: [ADDR] Name: a; Address: 4; Type: (*) to int8;
----Constant :: [NUMLIT] Type: int8; Value: 2;
---Assign :: [RVAL] Type: int32; Address: 0;
----Deref pointer :: [LVAL] Address: 0; Type: int32;
-----Address of :: [ADDR] Name: a; Address: 8; Type: (*) to int32;
----Constant :: [NUMLIT] Type: int32; Value: 3;
--Return expr statement ::
---Deref pointer :: [LVAL] Address: 0; Type: struct str2;
----Address of :: [ADDR] Name: a; Address: 0; Type: (*) to struct str2;
---Address of :: [ADDR] Name: $return_addr; Address: 0; Type: (*) to (*) to struct str2;
--Function epilogue ::
-Function body :: [FDEF] Name: main;
--Function prologue ::
--Return expr statement ::
---Assign :: [RVAL] Type: int32; Address: 0;
----Field ref :: [LVAL] Address: 4; Type: int32;
-----Field ref :: [LVAL] Address: 4; Type: struct str1;
------Deref pointer :: [LVAL] Address: 0; Type: struct str2;
-------Address of :: [ADDR] Name: $storage00; Address: 0; Type: (*) to struct str2;
----Function call :: [RVAL] Type: struct str2; Address: 0;
-----Address of :: [ADDR] Name: f; Address: 0; Type: (*) to function(<nonprototype>) returning struct str2;
--Function epilogue ::

Memory safety report: [
-Symtab: [
--Symtab          allocated =    1, freed =    1;
--Scope           allocated =   12, freed =   12;
--Obj             allocated =   22, freed =   22;
--Struct          allocated =   21, freed =   21;
--StaticVal       allocated =    0, freed =    0;
-]
-Utility: [
--LinkedList      allocated =   15, freed =   15;
--Node            allocated =   88, freed =   88;
--String          allocated =   36, freed =   37;
--Vector          allocated =    4, freed =    4;
--Array           allocated =    1, freed =    1;
-]
-Declarations: [
--TypeFrame       allocated =   10, freed =   10;
--NameFrame       allocated =    8, freed =    8;
--InitFrame       allocated =    2, freed =    2;
--ConstExpr       allocated =    0, freed =    0;
-]
-Statements: [
--TreeNode        allocated =   37, freed =   37;
--Tree            allocated =    1, freed =    1;
--Numlit          allocated =    3, freed =    3;
--ExprNode        allocated =   29, freed =   29;
-]
-Generating: [
--CallFrame       allocated =    1, freed =    1;
--ArgAlloc        allocated =    1, freed =    1;
--LogicNode       allocated =    0, freed =    0;
--StackAlloc      allocated =    0, freed =    0;
--MemAlloc        allocated =    0, freed =    0;
--IrInstr         allocated =   38, freed =   38;
-]
]

Semantic analysis successful.
