ERROR (14:15): Pointed objects qualifications are not compatible for initialization.
ERROR (16:10): Pointed objects qualifications are not compatible.
Parsing finished successfully.

Symtab: [
 Predefined types:
 void
 int8
 uint8
 int16
 uint16
 int32
  (*) to int32
  [3] of int32
  function(<nonprototype>) returning int32
  const int32
   (*) to const int32
 uint32
 int64
 uint64

 Scope: file [
  Obj: tag [
   Name: str1; Tag type: struct; Definition: defined; Size: 0x0014; Align: 0x0004
   Type: [
    struct str1: int32 a (0x0000), (*) to int32 b (0x0004), [3] of int32 c (0x0008)
   ]
  ]
  Obj: variable [
   Name: main; Address: 0x0000; Definition: defined; Storage: static; Linkage: external;
   Type: [function(<nonprototype>) returning int32]
  ]
  Scope: function prototype [
   Scope: block [
    Obj: variable [
     Name: a; Address: 0x0004; Definition: defined; Storage: auto; Linkage: none;
     Type: [int32]
    ]
    Obj: variable [
     Name: b; Address: 0x0008; Definition: defined; Storage: auto; Linkage: none;
     Type: [(*) to const int32]
    ]
    Obj: variable [
     Name: c; Address: 0x000C; Definition: defined; Storage: auto; Linkage: none;
     Type: [(*) to const int32]
    ]
    Obj: variable [
     Name: d; Address: 0x0010; Definition: defined; Storage: auto; Linkage: none;
     Type: [const int32]
    ]
    Obj: variable [
     Name: e; Address: 0x0014; Definition: defined; Storage: auto; Linkage: none;
     Type: [(*) to int32]
    ]
    Obj: variable [
     Name: f; Address: 0x0018; Definition: defined; Storage: auto; Linkage: none;
     Type: [(*) to int32]
    ]
   ]
  ]
 ]
]

Static objects list: [
]

String table: [
]

Translation unit 
-Function body 
--Function entry 
--Initializer list 
---Initializer [LVAL] + Name: b; Address: 0x0000; Type: (*) to const int32;
----Address of [RVAL] + Type: (*) to int32;
-----Identifier [LVAL] + Name: a; Address: 0x0000; Type: int32;
--Expression statement 
---Assign [RVAL] + Type: (*) to const int32;
----Identifier [LVAL] + Name: c; Address: 0x0000; Type: (*) to const int32;
----Address of [RVAL] + Type: (*) to int32;
-----Identifier [LVAL] + Name: a; Address: 0x0000; Type: int32;
--Initializer list 
--Expression statement 
---Assign 
----Identifier [LVAL] + Name: f; Address: 0x0000; Type: (*) to int32;
----Address of [RVAL] + Type: (*) to const int32;
-----Identifier [LVAL] + Name: d; Address: 0x0000; Type: const int32;
--Function exit 

Memory safety report: [
-Symtab: [
--Symtab          allocated =    1, freed =    1;
--Scope           allocated =    3, freed =    3;
--Obj             allocated =   11, freed =   11;
--Struct          allocated =    6, freed =    6;
--StaticVal       allocated =    0, freed =    0;
-]
-Utility: [
--LinkedList      allocated =    3, freed =    3;
--Node            allocated =   32, freed =   32;
--String          allocated =   17, freed =   17;
-]
-Declarations: [
--TypeFrame       allocated =    3, freed =    3;
--NameFrame       allocated =    2, freed =    2;
--InitFrame       allocated =    0, freed =    0;
--ConstExpr       allocated =    1, freed =    1;
-]
-Statements: [
--TreeNode        allocated =   22, freed =   22;
--Tree            allocated =    1, freed =    1;
--Numlit          allocated =    1, freed =    1;
--ExprNode        allocated =   14, freed =   13; <-- WARNING
--LogicNode       allocated =    0, freed =    0;
-]
-Generating: [
--ArgPass         allocated =    0, freed =    0;
-]
]

Program contains semantic errors.
